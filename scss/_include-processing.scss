// @mixin - helpers
@mixin properties-processing($list) {
  @each $property, $value in $list {
    #{$property}: $value;
  }
}

@mixin map-processing($first-lvl-el-name, $map, $type) {
  @if $type == class {
    @each $modifier-class-name, $modifier-properties in $map {
      .#{$first-lvl-el-name}#{$modifier-class-name} {
        @include properties-processing($modifier-properties);
      }
    }
  } @else if $type == modifiers {
    @each $modifier-class-name, $modifier-properties in $map {
      &#{$first-lvl-el-name}#{$modifier-class-name} {
        @include properties-processing($modifier-properties);
      }
    }
  } @else if $type == themes {
    @each $modifier-class-name, $modifier-properties in $map {
      .#{$first-lvl-el-name} &#{$modifier-class-name} {
        @include properties-processing($modifier-properties);
      }
    }
  }
}

@mixin list-processing($first-lvl-el-name, $list, $type) {
  @if $type == class {
    .#{$first-lvl-el-name} {
      @include properties-processing($list);
    }
  } @else if $type == modifiers {
    &#{$first-lvl-el-name} {
      @include properties-processing($list);
    }
  } @else if $type == themes {
    .#{$first-lvl-el-name} & {
      @include properties-processing($list);
    }
  }
}

@mixin processing($fst-lvl-el-name, $list, $map, $type) {
  @if type_of(nth(nth($map, 1), 2)) == map {
    // nested -elements/--modifiers
    @include map-processing($fst-lvl-el-name, $map, $type);
  } @else {
    // list of css properties
    @include list-processing($fst-lvl-el-name, $list, $type);
  }
}

// ===MODIFIER PROCESSING===
// 1.Config map
// keys mast be
// [a] -elements -> processed in class &-element
// [b] --modifiers -> processed in class &--modifier
// [1] with nested --modifiers / -elements
// $config: (
//  -first-lvl-element: (
//    --modifier-class-name: (
//      modifier-css-property: modifier-css-property-value,
//      ...
//    ),
//    -element-class-name: (
//      element-css-property: element-css-property-value,
//      ...
//    ),
//  ...
//  ),
//  --first-lvl-modifier: (
//    --modifier-class-name: (
//      modifier-css-property: modifier-css-property-value,
//      ...
//    ),
//    -element-class-name: (
//      element-css-property: element-css-property-value,
//      ...
//    ),
//  ..
//  )
// )
// [2] just list of css properties
// example
// $config: (
//  -element (
//    css-property-1: css-property-value-1,
//    css-property-2: css-property-value-2
//    ...
//  )
// )

// $config examples
// $modifiers-for-man: (
//   -heir: (
//     color: black,
//   ),
//   -face: (
//       --eyes: (
//         color: blue,
//         background-color: white,
//       ),
//       --nose: (
//         height: 7cm,
//         width: 3cm,
//       ),
//       --lips: (
//         color: red,
//       ),
//     ),
//   -hand: (
//       --left: (
//         text-align: left,
//       ),
//       --right: (
//         text-align: right,
//       ),
//     ),
// );
//
// $btn-sizes: (
//   --lg: (
//     height: 40px,
//   ),
//   --md: (
//     height: 30px,
//   ),
//   --sm: (
//     height: 20px,
//   ),
// );

// 2. @mixin modifier-processing
@mixin modifiers-processing($config) {
  @each $item in $config {
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    // check if second element in $item is map
    // (set of modifiers/css properties)
    // and not css property value alone
    @if type_of($item-value) == map {
      $modifiers-map: $item-value;
      // check if second element of list is map and not css property
      // if yes -> we have inside -elements/--modifiers structure
      // if no -> we have -elements/--modifiers with list of css properties
      //
      // Details: both structures
      // (nested -elements/--modifiers or list of css properties)
      // have the list as first item in $item-value
      // <<
      // ($--modifier-class-name: (modifier-css-property:
      //                  modifier-css-property-value,..)
      // >>
      // <<
      // (css-property-1: css-property-value-1,...)
      // >>
      // but the second element of this first list is
      // map if we have -elements/-modifiers structure
      // ($modifier-property: modifier-property-value,..)
      // css property value in another case
      //
      @include processing($item-key, $item-value, $modifiers-map, modifiers);
      //
    } @else {
      // if in $config only smth like css properties
      @warn 'css properties in $config - no processing required. Include them in usual way!';
    }
  }
}

// ===THEME PROCESSING===
// 1. Themes
// Themes example
// $themes: (
//   // $theme-key: $theme-class-name
//   theme-light: theme--light,
//   theme-dark: theme--dark
// );

// 2.Config
// first level keys must be
// the same as in $themes map
// than two types of $theme-key structures are possible:
// [1] with nested -elements/--modifiers
// $config: (
//  $theme-key: (
//    --modifier-class-name: (
//      modifier-css-property: modifier-css-property-value,
//      ...
//    ),
//    -element-class-name: (
//      element-css-property: element-css-property-value,
//      ...
//    ),
//  ...
//  )
// ...
// )
// [2] just list of css properties
// example
// $config: (
//  $theme-key: (
//    css-property-1: css-property-value-1,
//    css-property-2: css-property-value-2
//    ...
//  )
// )
// elements/modifiers nested in [$first-lvl-key != $theme-keys] NOT processing
// use @include modifiers-processing

// $config example with themes, themes with modifiers
// $config: (
//   // [1]
//   theme-light:
//     (
//       error: (
//         background: #d82d2d,
//         color: #666,
//       ),
//       success: (
//         background: #52bf4a,
//         color: #fff,
//       ),
//       warning: (
//         background: #c23435,
//         color: #fff,
//       ),
//     ),
//   // [2]
//   theme-dark:
//     (
//       background: #666,
//       color: #fff,
//     ),
//   // modifiers in [modifiers != $theme-keys] NOT processing
//   not-theme-key: (
//     --error: (
//         background: #d82d2d,
//         color: #fff,
//       ),
//     ...
//   )
// );

// 3. @mixin theme-processing
@mixin theme-processing($config, $themes) {
  @each $item in $config {
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    // check if second element in $item is map
    // (set of modifiers/css properties)
    // and not css property value alone
    @if type_of($item-value) == map {
      @if $themes != () {
        // crete list of all $theme-keys
        // to avoid looping in map $themes
        // cause no @break supported to stop the loop
        // and additional unwanted iterations will be done
        $full-theme-keys-list: ();
        @each $theme-key, $theme-class-name in $themes {
          $full-theme-keys-list: append($full-theme-keys-list, $theme-key);
        }

        // check if first item in list $item (=$item-key)
        // is exists in list $full-theme-keys-list
        @if index($full-theme-keys-list, $item-key) {
          // === THEME RELATED ===
          $modifiers-map: $item-value;
          $theme-class-name: map-get($themes, $item-key);
          // check if second element of list is map and not css property
          // if yes -> we have $theme-key structure with -elements/--modifiers
          // if no -> we have $theme-key just list with css properties
          //
          // Details: both structures
          // (nested -elements/--modifiers or list of css properties)
          // have the list as first item in $item-value
          // <<
          // ($--modifier-class-name: (modifier-css-property:
          //                  modifier-css-property-value,..)
          // >>
          // <<
          // (css-property-1: css-property-value-1,...)
          // >>
          // but the second element of this first list is
          // map if we have -elements/-modifiers structure
          // ($modifier-property: modifier-property-value,..)
          // css property value in another case
          //
          @include processing(
            $theme-class-name,
            $item-value,
            $modifiers-map,
            themes
          );
          //
        }
      }
    } @else {
      // if in $config only smth like css properties
      @warn 'css properties in $config - no processing required. Include them in usual way!';
    }
  }
}

// 4. @mixin class-processing
@mixin class-processing($config) {
  @each $item in $config {
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    // check if second element in $item is map
    // (set of modifiers/css properties)
    // and not css property value alone
    @if type_of($item-value) == map {
      $modifiers-map: $item-value;
      // check if second element of list is map and not css property
      // if yes -> we have inside -elements/--modifiers structure
      // if no -> we have -elements/--modifiers with list of css properties
      //
      // Details: both structures
      // (nested -elements/--modifiers or list of css properties)
      // have the list as first item in $item-value
      // <<
      // ($--modifier-class-name: (modifier-css-property:
      //                  modifier-css-property-value,..)
      // >>
      // <<
      // (css-property-1: css-property-value-1,...)
      // >>
      // but the second element of this first list is
      // map if we have -elements/-modifiers structure
      // ($modifier-property: modifier-property-value,..)
      // css property value in another case
      //
      @include processing($item-key, $item-value, $modifiers-map, class);
      //
    } @else {
      // if in $config only smth like css properties
      @warn 'css properties in $config - no processing required. Include them in usual way!';
    }
  }
}
